generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Instructor
  Admin
}

enum UploadType {
  Image
  Video
}

model User {
  id                    String   @id @default(uuid())
  username              String   @unique
  name                  String
  email                 String   @unique
  password              String
  role                  Role     @default(User)
  verify                Int      @default(0)
  status_account        Int      @default(1)
  dateOfBirth           DateTime
  avatarUrl             String?
  bio                   String?
  gender                String?
  email_verify_token    String?
  forgot_password_token String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  enrollments   Enrollment[]
  reviews       Review[]
  payments      Payment[]
  refreshTokens RefreshToken[]
  courses       Course[]       @relation("CourseInstructor")
}

model Course {
  id           String    @id @default(uuid())
  title        String
  description  String?
  price        Float     @default(0.00)
  thumbnailUrl String?
  bannerUrl    String
  instructor   User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  instructorId String
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  isPublished  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  rating                Float?  @default(0.0)
  totalReviews          Int?    @default(0)
  moneyBackGuarantee    Boolean @default(true)
  videoHours            Int?    @default(0)
  articlesCount         Int?    @default(0)
  downloadableResources Int?    @default(0)
  lifetimeAccess        Boolean @default(true)
  certificate           Boolean @default(true)

  courseOverview     String?
  learningObjectives String?
  courseFeatures     String?
  requirements       String?

  level   Level?  @relation(fields: [levelId], references: [id])
  levelId String?

  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
  payments    Payment[]
  faqs        Faq[]
}

model Level {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  courses     Course[]
}

model Lesson {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  title     String
  content   String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos Video[]
}

model Video {
  id        String   @id @default(uuid())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  videoUrl  String
  duration  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String
  amount        Float
  status        Int
  transactionId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id         String     @id @default(uuid())
  uploadType UploadType
  fileUrl    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Faq {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}
