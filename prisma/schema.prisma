generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadType {
  Image
  Video
}

model User {
  id                    Int      @id @default(autoincrement())
  username              String   @unique
  name                  String
  email                 String   @unique
  password              String
  roleId                  Int
  verify                Int      @default(0)
  status_account        Int      @default(1)
  dateOfBirth           DateTime
  avatarUrl             String?
  bio                   String?
  gender                String?
  email_verify_token    String?
  forgot_password_token String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  enrollments   Enrollment[]
  reviews       Review[]
  payments      Payment[]
  refreshTokens RefreshToken[]
  courses       Course[]       @relation("CourseInstructor")
  adminActions  AdminAction[]  @relation("AdminActions")
  AdminAction   AdminAction[]
}

model Course {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  price        Float     @default(0.00)
  thumbnailUrl String?
  bannerUrl    String
  instructor   User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  instructorId Int
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  isPublished  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
  payments    Payment[]
  uploads     Upload[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  title     String
  content   String?
  order     Int
  createdAt DateTime @default(now())

  videos Video[]
}

model Video {
  id       Int    @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  videoUrl String
  duration Int
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())
}

model Payment {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      Int
  amount        Float
  status        Int
  transactionId String   @unique
  createdAt     DateTime @default(now())
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  permissions RolePermission[]
}

model RolePermission {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  permId Int
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Upload {
  id         Int        @id @default(autoincrement())
  course     Course     @relation(fields: [courseId], references: [id])
  courseId   Int
  uploadType UploadType
  fileUrl    String
  createdAt  DateTime   @default(now())
}

model AdminAction {
  id          Int      @id @default(autoincrement())
  admin       User     @relation("AdminActions", fields: [adminId], references: [id])
  adminId     Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  action      String
  description String?
  createdAt   DateTime @default(now())
}
