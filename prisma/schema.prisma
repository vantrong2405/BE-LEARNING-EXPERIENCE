generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  username              String         @unique
  name                  String
  email                 String         @unique
  password              String
  role                  Role           @default(User)
  verify                Int            @default(0)
  status_account        Int            @default(1)
  dateOfBirth           DateTime
  avatarUrl             String?
  bio                   String?
  gender                String?
  email_verify_token    String?
  forgot_password_token String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  Cart                  Cart?
  courses               Course[]       @relation("CourseInstructor")
  enrollments           Enrollment[]
  payments              Payment[]
  refreshTokens         RefreshToken[]
  reviews               Review[]
}

model Course {
  id                    String       @id @default(uuid())
  title                 String
  description           String?
  price                 Float        @default(0.00)
  thumbnailUrl          String?
  bannerUrl             String
  instructorId          String
  categoryId            String?
  isPublished           Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  rating                Float?       @default(0.0)
  totalReviews          Int?         @default(0)
  moneyBackGuarantee    Boolean      @default(true)
  videoHours            Int?         @default(0)
  articlesCount         Int?         @default(0)
  downloadableResources Int?         @default(0)
  lifetimeAccess        Boolean      @default(true)
  certificate           Boolean      @default(true)
  courseOverview        String?
  learningObjectives    String?
  courseFeatures        String?
  requirements          String?
  levelId               String?
  CartItem              CartItem[]
  category              Category?    @relation(fields: [categoryId], references: [id])
  instructor            User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  level                 Level?       @relation(fields: [levelId], references: [id])
  enrollments           Enrollment[]
  faqs                  Faq[]
  lessons               Lesson[]
  payments              Payment[]
  reviews               Review[]
  videos                Video[]
}

model Level {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  courses     Course[]
}

model Lesson {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  content   String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  videos    Video[]

  @@unique([courseId, order])
}

model Video {
  id          String   @id @default(uuid())
  lessonId    String
  courseId    String
  orderLesson Int      @default(1)
  title       String
  description String?
  videoUrl    String
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  lesson      Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([lessonId, orderLesson])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  courseId      String
  amount        Float
  status        Int
  transactionId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  course        Course   @relation(fields: [courseId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Upload {
  id         String     @id @default(uuid())
  uploadType UploadType
  fileUrl    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Faq {
  id        String   @id @default(uuid())
  courseId  String
  question  String
  answer    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  courseId  String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([cartId, courseId])
}

enum Role {
  User
  Instructor
  Admin
}

enum UploadType {
  Image
  Video
}
